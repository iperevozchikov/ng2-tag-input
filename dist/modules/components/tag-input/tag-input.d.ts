import { EventEmitter, Renderer2, OnInit, TemplateRef, QueryList, AfterViewInit } from '@angular/core';
import { AsyncValidatorFn, ValidatorFn } from '@angular/forms';
import { Observable } from 'rxjs';
import { TagInputAccessor, TagModel } from '../../core/accessor';
import { DragProvider } from '../../core/providers/drag-provider';
import { TagInputForm } from '../tag-input-form/tag-input-form.component';
import { TagInputDropdown } from '../dropdown/tag-input-dropdown.component';
import { TagInputVirtualizedDropdown } from '../virtualized-dropdown/tag-input-virtualized-dropdown.component';
import { TagComponent } from '../tag/tag.component';
export declare class TagInputComponent extends TagInputAccessor implements OnInit, AfterViewInit {
    private readonly renderer;
    readonly dragProvider: DragProvider;
    applyFocusOnClick: boolean;
    applyFocusOnAdd: boolean;
    applyFocusOnRemove: boolean;
    applyFocusOnLast: boolean;
    separatorKeys: string[];
    separatorKeyCodes: number[];
    placeholder: string;
    secondaryPlaceholder: string;
    maxItems: number;
    validators: ValidatorFn[];
    asyncValidators: AsyncValidatorFn[];
    onlyFromAutocomplete: boolean;
    errorMessages: {
        [key: string]: string;
    };
    theme: string;
    onTextChangeDebounce: number;
    inputId: string | null;
    inputClass: string;
    clearOnBlur: boolean;
    hideForm: boolean;
    addOnBlur: boolean;
    addOnPaste: boolean;
    pasteSplitPattern: string | RegExp;
    blinkIfDupe: boolean;
    removable: boolean;
    editable: boolean;
    allowDupes: boolean;
    modelAsStrings: boolean;
    trimTags: boolean;
    inputText: string;
    ripple: boolean;
    tabindex: string;
    disable: boolean;
    dragZone: string;
    onRemoving: ((tag: TagModel) => Observable<TagModel>) | undefined;
    onAdding: ((tag: TagModel) => Observable<TagModel>) | undefined;
    animationDuration: {
        enter: string;
        leave: string;
    };
    onAdd: EventEmitter<TagModel>;
    onRemove: EventEmitter<TagModel>;
    onSelect: EventEmitter<TagModel>;
    onFocus: EventEmitter<string>;
    onBlur: EventEmitter<string>;
    onTextChange: EventEmitter<TagModel>;
    onPaste: EventEmitter<string>;
    onValidationError: EventEmitter<TagModel>;
    onTagEdited: EventEmitter<TagModel>;
    private _dropdown;
    private _virtualizedDropdown;
    templates: QueryList<TemplateRef<any>>;
    inputForm: TagInputForm;
    selectedTag: TagModel | undefined;
    isLoading: boolean;
    tags: QueryList<TagComponent>;
    private listeners;
    inputTextChange: EventEmitter<string>;
    inputTextValue: string;
    readonly tabindexAttr: string;
    readonly dropdown: TagInputDropdown | TagInputVirtualizedDropdown;
    animationMetadata: {
        value: string;
        params: object;
    };
    errors: string[];
    isProgressBarVisible$: Observable<boolean>;
    constructor(renderer: Renderer2, dragProvider: DragProvider);
    ngAfterViewInit(): void;
    ngOnInit(): void;
    onRemoveRequested(tag: TagModel, index: number): Promise<TagModel>;
    onAddingRequested(fromAutocomplete: boolean, tag: TagModel, index?: number): Promise<TagModel>;
    appendTag: (tag: TagModel, index?: number) => void;
    createTag: (model: TagModel) => TagModel;
    selectItem(item: TagModel | undefined, emit?: boolean): void;
    fireEvents(eventName: string, $event?: any): void;
    handleKeydown(data: any): void;
    onFormSubmit(): Promise<void>;
    setInputValue(value: string, emitEvent?: boolean): void;
    private getControl();
    focus(applyFocus?: boolean, displayAutocomplete?: boolean): void;
    blur(): void;
    hasErrors(): boolean;
    isInputFocused(): boolean;
    hasCustomTemplate(): boolean;
    readonly maxItemsReached: boolean;
    readonly formValue: string;
    onDragStarted(event: DragEvent, tag: TagModel, index: number): void;
    onDragOver(event: DragEvent, index?: number): void;
    onTagDropped(event: DragEvent, index?: number): void;
    isDropping(): boolean;
    onTagBlurred(changedElement: TagModel, index: number): void;
    trackBy(index: number, item: TagModel): string;
    updateEditedTag({tag, index}: {
        tag: TagModel;
        index: number;
    }): void;
    isTagValid: (tag: TagModel, fromAutocomplete?: boolean) => boolean;
    private moveToTag(item, direction);
    private isFirstTag(item);
    private isLastTag(item);
    private getTagIndex(item);
    private getTagAtIndex(index);
    private removeItem(tag, index);
    private addItem(fromAutocomplete, item, index?);
    private setupSeparatorKeysListener();
    private setUpKeypressListeners();
    private setUpInputKeydownListeners();
    private setUpOnPasteListener();
    private setUpTextChangeSubscriber();
    private setUpOnBlurSubscriber();
    private findDupe(tag, isFromAutocomplete);
    private onPasteCallback;
    private setAnimationMetadata();
}
