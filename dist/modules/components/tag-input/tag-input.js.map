{"version":3,"file":"tag-input.js","sourceRoot":"","sources":["../../../../modules/components/tag-input/tag-input.ts"],"names":[],"mappings":"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","sourcesContent":["// angular\nimport {\n    Component,\n    forwardRef,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    Renderer2,\n    ViewChild,\n    ViewChildren,\n    ContentChildren,\n    ContentChild,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    AfterViewInit\n} from '@angular/core';\n\nimport {\n    AsyncValidatorFn,\n    FormControl,\n    NG_VALUE_ACCESSOR,\n    ValidatorFn\n} from '@angular/forms';\n\n// rx\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\n// ng2-tag-input\nimport {\n    TagInputAccessor,\n    TagModel,\n    listen,\n    constants\n} from '../../core';\n\nimport {\n    TagInputForm,\n    TagInputDropdown,\n    TagInputVirtualizedDropdown,\n    TagComponent\n} from '../../components';\n\nimport { animations } from './animations';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst DragEvent = (global as any).DragEvent;\n\nconst CUSTOM_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagInputComponent),\n    multi: true\n};\n\n/**\n * A component for entering a list of terms to be used with ngModel.\n */\n@Component({\n    selector: 'tag-input',\n    providers: [CUSTOM_ACCESSOR],\n    styleUrls: ['./tag-input.style.scss'],\n    templateUrl: './tag-input.template.html',\n    animations: animations\n})\nexport class TagInputComponent extends TagInputAccessor implements OnInit, AfterViewInit {\n    @Input() public applyFocusOnClick = true;\n\n    @Input() public applyFocusOnAdd = true;\n\n    @Input() public applyFocusOnRemove = true;\n\n    @Input() public applyFocusOnLast = true;\n\n    /**\n     * @name separatorKeys\n     * @desc keyboard keys with which a user can separate items\n     * @type {Array}\n     */\n    @Input() public separatorKeys: string[] = [];\n\n    /**\n     * @name separatorKeyCodes\n     * @desc keyboard key codes with which a user can separate items\n     * @type {Array}\n     */\n    @Input() public separatorKeyCodes: number[] = [];\n\n    /**\n     * @name placeholder\n     * @desc the placeholder of the input text\n     * @type {string}\n     */\n    @Input() public placeholder: string = constants.PLACEHOLDER;\n\n    /**\n     * @name secondaryPlaceholder\n     * @desc placeholder to appear when the input is empty\n     * @type {string}\n     */\n    @Input() public secondaryPlaceholder: string = constants.SECONDARY_PLACEHOLDER;\n\n    /**\n     * @name maxItems\n     * @desc maximum number of items that can be added\n     * @type {number}\n     */\n    @Input() public maxItems: number;\n\n    /**\n     * @name transform\n     * @desc function passed to the component to transform the value of the items, or reject them instead\n     */\n    @Input() public transform: (item: string) => string = (item) => item;\n\n    /**\n     * @name validators\n     * @desc array of Validators that are used to validate the tag before it gets appended to the list\n     * @type {Validators[]}\n     */\n    @Input() public validators: ValidatorFn[] = [];\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     * @type {Array}\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = [];\n\n    /**\n    * - if set to true, it will only possible to add items from the autocomplete\n    * @name onlyFromAutocomplete\n    * @type {Boolean}\n    */\n    @Input() public onlyFromAutocomplete = false;\n\n\t/**\n     * @name errorMessages\n     * @type {Map<string, string>}\n     */\n    @Input() public errorMessages: { [key: string]: string } = {};\n\n    /**\n     * @name theme\n     * @type {string}\n     */\n    @Input() public theme: string;\n\n    /**\n     * @name onTextChangeDebounce\n     * @type {number}\n     */\n    @Input() public onTextChangeDebounce = 250;\n\n    /**\n     * - custom id assigned to the input\n     * @name id\n     */\n    @Input() public inputId: string;\n\n    /**\n     * - custom class assigned to the input\n     */\n    @Input() public inputClass: string;\n\n    /**\n     * - option to clear text input when the form is blurred\n     * @name clearOnBlur\n     */\n    @Input() public clearOnBlur: string;\n\n    /**\n     * - hideForm\n     * @name clearOnBlur\n     */\n    @Input() public hideForm: string;\n\n    /**\n     * @name addOnBlur\n     */\n    @Input() public addOnBlur: boolean;\n\n    /**\n     * @name addOnPaste\n     */\n    @Input() public addOnPaste: boolean;\n\n    /**\n     * - pattern used with the native method split() to separate patterns in the string pasted\n     * @name pasteSplitPattern\n     */\n    @Input() public pasteSplitPattern = ',';\n\n    /**\n     * @name blinkIfDupe\n     * @type {boolean}\n     */\n    @Input() public blinkIfDupe = true;\n\n    /**\n     * @name removable\n     * @type {boolean}\n     */\n    @Input() public removable = true;\n\n    /**\n     * @name editable\n     * @type {boolean}\n     */\n    @Input() public editable: boolean = undefined;\n\n    /**\n     * @name allowDupes\n     * @type {boolean}\n     */\n    @Input() public allowDupes = false;\n\n    /**\n     * @description if set to true, the newly added tags will be added as strings, and not objects\n     * @name modelAsStrings\n     * @type {boolean}\n     */\n    @Input() public modelAsStrings = false;\n\n    /**\n     * @name trimTags\n     * @type {boolean}\n     */\n    @Input() public trimTags = true;\n\n    /**\n     * @name inputText\n     */\n    @Input() public get inputText(): string {\n        return this.inputTextValue;\n    }\n\n    /**\n     * @name ripple\n     * @type {boolean}\n     */\n    @Input() public ripple = true;\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     * @type {string}\n     */\n    @Input() public tabindex: string = undefined;\n\n    /**\n     * @name disabled\n     * @type {boolean}\n     */\n    @Input() public disabled = undefined;\n\n    /**\n     * @name dragZone\n     * @type {string}\n     */\n    @Input() public dragZone: string = undefined;\n\n    /**\n     * @name onRemoving\n     * @type {() => Observable<void>}\n     */\n    @Input() public onRemoving: (tag: TagModel) => Observable<TagModel>;\n\n    /**\n     * @name onAdding\n     * @type {() => Observable<void>}\n     */\n    @Input() public onAdding: (tag: TagModel) => Observable<TagModel>;\n\n    /**\n     * @name onAdd\n     * @desc event emitted when adding a new item\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onAdd = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     * @desc event emitted when removing an existing item\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onRemove = new EventEmitter<TagModel>();\n\n    /**\n     * @name onSelect\n     * @desc event emitted when selecting an item\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onSelect = new EventEmitter<TagModel>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is focused\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onFocus = new EventEmitter<string>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is blurred\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onBlur = new EventEmitter<string>();\n\n    /**\n     * @name onTextChange\n     * @desc event emitted when the input value changes\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onTextChange = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when text is pasted in the form\n     * @name onPaste\n     * @type {EventEmitter<TagModel>}\n     */\n    @Output() public onPaste = new EventEmitter<string>();\n\n    /**\n     * - output triggered when tag entered is not valid\n     * @name onValidationError\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onValidationError = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when tag is edited\n     * @name onTagEdited\n     * @type {EventEmitter<TagModel>}\n     */\n    @Output() public onTagEdited = new EventEmitter<TagModel>();\n\n    /**\n     * @name dropdown\n     */\n    @ContentChild(TagInputDropdown) private _dropdown: TagInputDropdown;\n\n    @ContentChild(TagInputVirtualizedDropdown) private _virtualizedDropdown: TagInputVirtualizedDropdown;\n\n    /**\n     * @name template\n     * @desc reference to the template if provided by the user\n     * @type {TemplateRef}\n     */\n    @ContentChildren(TemplateRef, { descendants: false }) public templates: QueryList<TemplateRef<any>>;\n\n\t/**\n     * @name inputForm\n     * @type {TagInputForm}\n     */\n    @ViewChild(TagInputForm) public inputForm: TagInputForm;\n\n    /**\n     * @name selectedTag\n     * @desc reference to the current selected tag\n     * @type {String}\n     */\n    public selectedTag: TagModel;\n\n    /**\n     * @name isLoading\n     * @type {boolean}\n     */\n    public isLoading = false;\n\n    /**\n     * @name isDropping\n     * @type {boolean}\n     */\n    public isDropping = false;\n\n    /**\n     * @name isDragging\n     * @type {boolean}\n     */\n    public isDragging = false;\n\n    /**\n     * @name inputText\n     * @param text\n     */\n    public set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n\n    /**\n     * @name tags\n     * @desc list of Element items\n     */\n    @ViewChildren(TagComponent) public tags: QueryList<TagComponent>;\n\n    /**\n     * @name listeners\n     * @desc array of events that get fired using @fireEvents\n     * @type []\n     */\n    private listeners = {\n        [constants.KEYDOWN]: <{ (fun): any }[]>[],\n        [constants.KEYUP]: <{ (fun): any }[]>[],\n        change: <{ (fun): any }[]>[]\n    };\n\n    /**\n     * @description emitter for the 2-way data binding inputText value\n     * @name inputTextChange\n     * @type {EventEmitter}\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * @description private variable to bind get/set\n     * @name inputTextValue\n     * @type {string}\n     */\n    public inputTextValue = '';\n\n    /**\n     * @desc removes the tab index if it is set - it will be passed through to the input\n     * @name tabindexAttr\n     * @type {string}\n     */\n    @HostBinding('attr.tabindex')\n    public get tabindexAttr(): string {\n        return this.tabindex !== undefined ? '-1' : undefined;\n    }\n\n    public get dropdown(): TagInputDropdown | TagInputVirtualizedDropdown | undefined {\n        return !this._virtualizedDropdown ? (!this._dropdown ? undefined : this._dropdown) : this._virtualizedDropdown;\n    }\n\n    constructor(private renderer: Renderer2) {\n        super();\n    }\n\n    /**\n     * @name onRemoveRequested\n     * @param tag\n     * @param index\n     */\n    public onRemoveRequested(tag: TagModel, index: number): void {\n        if (this.onRemoving) {\n            this.onRemoving(tag)\n                .subscribe((model: TagModel) => {\n                    this.removeItem(model, index);\n                });\n        } else {\n            this.removeItem(tag, index);\n        }\n    }\n\n    /**\n     * @name onAddingRequested\n     * @param isFromAutocomplete {boolean}\n     * @param tag {TagModel}\n     */\n    public onAddingRequested(isFromAutocomplete: boolean, tag: TagModel, index = undefined): void {\n        if (!tag) {\n            return;\n        }\n\n        if (this.onAdding) {\n            this.onAdding(tag)\n                .subscribe((model: TagModel) => {\n                    this.addItem(isFromAutocomplete, model, index);\n                });\n        } else {\n            this.addItem(isFromAutocomplete, tag, index);\n        }\n    }\n\n    /**\n     *\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    public isTagValid(tag: TagModel, fromAutocomplete = false): boolean {\n        const selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;\n\n        if (selectedItem && !fromAutocomplete) {\n            return;\n        }\n\n        const dupe = this.findDupe(tag, fromAutocomplete);\n\n        // if so, give a visual cue and return false\n        if (!this.allowDupes && dupe && this.blinkIfDupe) {\n            const item = this.tags.find(_tag => {\n                return this.getItemValue(_tag.model) === this.getItemValue(dupe);\n            });\n\n            if (!!item) {\n                item.blink();\n            }\n        }\n\n        const isFromAutocomplete = fromAutocomplete && this.onlyFromAutocomplete;\n\n        const assertions = [\n            // 1. there must be no dupe OR dupes are allowed\n            !dupe || this.allowDupes === true,\n\n            // 2. check max items has not been reached\n            this.maxItemsReached === false,\n\n            // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n            ((isFromAutocomplete) || this.onlyFromAutocomplete === false)\n        ];\n\n        return assertions.filter(item => item).length === assertions.length;\n    }\n\n    /**\n     * @name appendTag\n     * @param tag {TagModel}\n     */\n    public appendTag = (tag: TagModel, index = this.items.length): void => {\n        const items = this.items;\n        const model = this.modelAsStrings ? tag[this.identifyBy] : tag;\n        this.items = [...items.slice(0, index), model, ...items.slice(index, items.length)];\n    }\n\n    /**\n     * @name createTag\n     * @param model\n     * @returns {{}}\n     */\n    public createTag(model: TagModel): TagModel {\n        const trim = (val: TagModel, key: string): TagModel => {\n            return typeof val === 'string' ? val.trim() : val[key];\n        };\n\n        return {\n            ...typeof model !== 'string' ? model : {},\n            [this.displayBy]: this.trimTags ? trim(model, this.displayBy) : model,\n            [this.identifyBy]: this.trimTags ? trim(model, this.identifyBy) : model\n        };\n    }\n\n    /**\n     * @name selectItem\n     * @desc selects item passed as parameter as the selected tag\n     * @param item\n     * @param emit\n     */\n    public selectItem(item: TagModel, emit = true): void {\n        const isReadonly = item && typeof item !== 'string' && item.readonly;\n        if (isReadonly) {\n            return;\n        }\n\n        this.selectedTag = item;\n\n        if (emit) {\n            this.onSelect.emit(item);\n        }\n    }\n\n    /**\n     * @name fireEvents\n     * @desc goes through the list of the events for a given eventName, and fires each of them\n     * @param eventName\n     * @param $event\n     */\n    public fireEvents(eventName: string, $event?): void {\n        this.listeners[eventName]\n            .forEach(listener => listener.call(this, $event));\n    }\n\n    /**\n     * @name handleKeydown\n     * @desc handles action when the user hits a keyboard key\n     * @param data\n     */\n    public handleKeydown(data: any): void {\n        const event = data.event;\n        const key = event.keyCode || event.which;\n\n        // switch (constants.KEY_PRESS_ACTIONS[key]) {\n        //     case constants.ACTIONS_KEYS.DELETE:\n        //         if (this.selectedTag && this.removable) {\n        //             const index = this.items.indexOf(this.selectedTag);\n        //             this.onRemoveRequested(this.selectedTag, index);\n        //         }\n        //         break;\n        //     case constants.ACTIONS_KEYS.SWITCH_PREV:\n        //         this.switchPrev(data.model);\n        //         break;\n        //     case constants.ACTIONS_KEYS.SWITCH_NEXT:\n        //         this.switchNext(data.model);\n        //         break;\n        //     case constants.ACTIONS_KEYS.TAB:\n        //         this.switchNext(data.model);\n        //         break;\n        //     default:\n        //         return;\n        // }\n\n        // prevent default behaviour\n        event.preventDefault();\n    }\n\n    /**\n     * @name seyInputValue\n     * @param value\n     * @returns {string}\n     */\n    public setInputValue(value: string): string {\n        const item = value ? this.transform(value) : '';\n\n        // update form value with the transformed item\n        this.getControl().setValue(item);\n\n        return item;\n    }\n\n    /**\n     * @name getControl\n     * @returns {FormControl}\n     */\n    private getControl(): FormControl {\n        return <FormControl>this.inputForm.value;\n    }\n\n\t/**\n     * @name focus\n     * @param applyFocus\n     * @param displayAutocomplete\n     */\n    public focus(applyFocus = false, displayAutocomplete = false): void {\n        if (this.isDragging) {\n            return;\n        }\n\n        this.selectItem(undefined, false);\n\n        if (applyFocus) {\n            this.inputForm.focus();\n            this.onFocus.emit(this.formValue);\n        }\n\n        if (displayAutocomplete && this.dropdown) {\n            this.dropdown.show();\n        }\n    }\n\n\t/**\n     * @name blur\n     */\n    public blur(): void {\n        this.onTouched();\n\n        this.onBlur.emit(this.formValue);\n    }\n\n    /**\n     * @name hasErrors\n     * @returns {boolean}\n     */\n    public hasErrors(): boolean {\n        return this.inputForm && this.inputForm.hasErrors();\n    }\n\n    /**\n     * @name isInputFocused\n     * @returns {boolean}\n     */\n    public isInputFocused(): boolean {\n        return this.inputForm && this.inputForm.isInputFocused();\n    }\n\n    /**\n     * - this is the one way I found to tell if the template has been passed and it is not\n     * the template for the menu item\n     * @name hasCustomTemplate\n     */\n    public hasCustomTemplate(): boolean {\n        const templates = this.templates;\n        const template = templates ? templates.first : undefined;\n        const menuTemplate = this.dropdown && this.dropdown.templates ?\n            this.dropdown.templates.first : undefined;\n\n        return template && template !== menuTemplate;\n    }\n\n    /**\n     * @name switchNext\n     * @param item { TagModel }\n     */\n    public switchNext(item: TagModel): void {\n        if (this.tags.last.model === item) {\n            this.focus(this.applyFocusOnLast);\n            return;\n        }\n\n        const tags = this.tags.toArray();\n        const tagIndex = tags.findIndex(tag => tag.model === item);\n        const tag = tags[tagIndex + 1];\n\n        tag.select.call(tag);\n    }\n\n    /**\n     * @name switchPrev\n     * @param item { TagModel }\n     */\n    public switchPrev(item: TagModel): void {\n        if (this.tags.first.model !== item) {\n            const tags = this.tags.toArray();\n            const tagIndex = tags.findIndex(tag => tag.model === item);\n            const tag = tags[tagIndex - 1];\n\n            tag.select.call(tag);\n        }\n    }\n\n\t/**\n     * @name maxItemsReached\n     * @returns {boolean}\n     */\n    public get maxItemsReached(): boolean {\n        return this.maxItems !== undefined &&\n            this.items.length >= this.maxItems;\n    }\n\n    /**\n     * @name formValue\n     * @return {any}\n     */\n    public get formValue(): string {\n        return this.inputForm.value.value;\n    }\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        const hasReachedMaxItems = this.maxItems !== undefined &&\n            this.items &&\n            this.items.length > this.maxItems;\n\n        if (hasReachedMaxItems) {\n            this.maxItems = this.items.length;\n            console.warn(constants.MAX_ITEMS_WARNING);\n        }\n\n\t    // Setting editable to false to fix problem with tags in IE still being editable when\n\t    // onlyFromAutocomplete is true\n\t\tif (this.onlyFromAutocomplete) {\n\t\t\tthis.editable = false;\n\t\t}\n    }\n\n    /**3\n     * @name onDragStarted\n     * @param event\n     * @param index\n     */\n    public onDragStarted(event: DragEvent, index: number): void {\n        event.stopPropagation();\n\n        this.isDragging = true;\n\n        const draggedElement: TagModel = this.items[index];\n        const storedElement = { zone: this.dragZone, value: draggedElement };\n\n        event.dataTransfer.setData(constants.DRAG_AND_DROP_KEY, JSON.stringify(storedElement));\n\n        this.onRemoveRequested(draggedElement, index);\n    }\n\n    /**\n     * @name onDragOver\n     * @param event\n     */\n    public onDragOver(event: DragEvent): void {\n        this.isDropping = true;\n\n        event.preventDefault();\n    }\n\n    /**\n     * @name onDragEnd\n     */\n    public onDragEnd(): void {\n        this.isDragging = false;\n        this.isDropping = false;\n    }\n\n    /**\n     * @name onTagDropped\n     * @param event\n     * @param index\n     */\n    public onTagDropped(event: DragEvent, index: number): void {\n        this.onDragEnd();\n\n        const data = event.dataTransfer.getData(constants.DRAG_AND_DROP_KEY);\n        const droppedElement = JSON.parse(data);\n\n        if (droppedElement.zone !== this.dragZone) {\n            return;\n        }\n\n        this.onAddingRequested(false, droppedElement.value, index);\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /**\n     * @name ngAfterViewInit\n     */\n    public ngAfterViewInit(): void {\n        // set up listeners\n\n        this.setUpKeypressListeners();\n        this.setupSeparatorKeysListener();\n        this.setUpInputKeydownListeners();\n\n        if (this.onTextChange.observers.length) {\n            this.setUpTextChangeSubscriber();\n        }\n\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\n        if (this.clearOnBlur || this.addOnBlur) {\n            this.setUpOnBlurSubscriber();\n        }\n\n        // if addOnPaste is set to true, register the handler and add items\n        if (this.addOnPaste) {\n            this.setUpOnPasteListener();\n        }\n\n        // if hideForm is set to true, remove the input\n        if (this.hideForm) {\n            this.inputForm.destroy();\n        }\n    }\n\n    /**\n     * @name onTagBlurred\n     * @param changedElement {TagModel}\n     * @param index {number}\n     */\n    public onTagBlurred(changedElement: TagModel, index: number): void {\n        this.items[index] = changedElement;\n        this.blur();\n    }\n\n    /**\n     * @name trackBy\n     * @param item\n     * @returns {string}\n     */\n    public trackBy(item: TagModel): string {\n        return item[this.identifyBy];\n    }\n\n    /**\n     * @name removeItem\n     * @desc removes an item from the array of the model\n     * @param tag {TagModel}\n     * @param index {number}\n     */\n    private removeItem(tag: TagModel, index: number): void {\n        this.items = this.getItemsWithout(index);\n\n        // if the removed tag was selected, set it as undefined\n        if (this.selectedTag === tag) {\n            this.selectItem(undefined, false);\n        }\n\n        // focus input\n        this.focus(this.applyFocusOnRemove, false);\n\n        // emit remove event\n        this.onRemove.emit(tag);\n    }\n\n    /**\n     * @name addItem\n     * @desc adds the current text model to the items array\n     * @param fromAutocomplete\n     * @param item\n     */\n    private addItem(fromAutocomplete = false, item: TagModel = this.formValue, index = undefined): void {\n        /**\n         * @name reset\n         */\n        const reset = (): void => {\n            // reset control and focus input\n            this.setInputValue('');\n\n            // focus input\n            this.focus(this.applyFocusOnAdd, false);\n        };\n\n        /**\n         * @name validationFilter\n         * @param tag\n         * @return {boolean}\n         */\n        const validationFilter = (tag: TagModel): boolean => {\n            const isValid = this.isTagValid(tag, fromAutocomplete);\n\n            if (!isValid) {\n                this.onValidationError.emit(tag);\n            }\n\n            return isValid;\n        };\n\n        /**\n         * @name appendItem\n         * @param tag\n         */\n        const appendItem = (tag: TagModel): void => {\n            this.appendTag(tag, index);\n\n            // emit event\n            this.onAdd.emit(tag);\n        };\n\n        Observable\n            .of(this.getItemDisplay(item))\n            .map(display => this.setInputValue(display))\n            .filter(display => this.inputForm.form.valid && !!display)\n            .map((display: string) => this.createTag(fromAutocomplete ? item : display))\n            .filter(validationFilter)\n            .subscribe(appendItem, undefined, reset);\n    }\n\n    /**\n     * @name setupSeparatorKeysListener\n     */\n    private setupSeparatorKeysListener(): void {\n        const useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\n\n        listen.call(this, constants.KEYDOWN, ($event) => {\n            const hasKeyCode = this.separatorKeyCodes.indexOf($event.keyCode) >= 0;\n            const hasKey = this.separatorKeys.indexOf($event.key) >= 0;\n\n            if (hasKeyCode || hasKey) {\n                $event.preventDefault();\n                this.onAddingRequested(false, this.formValue);\n            }\n\n        }, useSeparatorKeys);\n    }\n\n    /**\n     * @name setUpKeypressListeners\n     */\n    private setUpKeypressListeners(): void {\n        // setting up the keypress listeners\n        listen.call(this, constants.KEYDOWN, ($event) => {\n            const isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n\n            if (isCorrectKey &&\n                !this.formValue &&\n                this.items.length) {\n                this.tags.last.select.call(this.tags.last);\n            }\n        });\n    }\n\n    /**\n     * @name setUpKeydownListeners\n     */\n    private setUpInputKeydownListeners(): void {\n        this.inputForm.onKeydown.subscribe(event => {\n            this.fireEvents('keydown', event);\n\n            if (event.key === 'Backspace' && this.formValue === '') {\n                event.preventDefault();\n            }\n        });\n    }\n\n    /**\n     * @name setUpOnPasteListener\n     */\n    private setUpOnPasteListener(): void {\n        const input = this.inputForm.input.nativeElement;\n\n        // attach listener to input\n        this.renderer.listen(input, 'paste', this.onPasteCallback.bind(this));\n    }\n\n    /**\n     * @name setUpTextChangeSubscriber\n     */\n    private setUpTextChangeSubscriber(): void {\n        this.inputForm\n            .form\n            .valueChanges\n            .debounceTime(this.onTextChangeDebounce)\n            .filter(() => this.formValue.trim().length > 0)\n            .subscribe(() => this.onTextChange.emit(this.formValue));\n    }\n\n    /**\n     * @name setUpOnBlurSubscriber\n     */\n    private setUpOnBlurSubscriber(): void {\n        const filterFn = (): boolean => {\n            return !(this.dropdown && this.dropdown.isVisible) && !!this.formValue;\n        };\n\n        this.inputForm\n            .onBlur\n            .filter(filterFn)\n            .subscribe(() => {\n                if (this.addOnBlur) {\n                    this.onAddingRequested(false, this.formValue);\n                }\n\n                this.setInputValue('');\n            });\n    }\n\n    /**\n     * @name findDupe\n     * @param tag\n     * @param isFromAutocomplete\n     * @return {undefined|TagModel}\n     */\n    private findDupe(tag: TagModel, isFromAutocomplete: boolean): TagModel {\n        const identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n        return this.items\n            .find((item: TagModel) => {\n                return this.getItemValue(item) === tag[identifyBy];\n            });\n    }\n\n    /**\n     * @name onPasteCallback\n     * @param data\n     */\n    private onPasteCallback(data: ClipboardEvent): void {\n        const text = data.clipboardData.getData('text/plain');\n\n        text.split(this.pasteSplitPattern)\n            .map(item => this.createTag(item))\n            .forEach(item => this.onAddingRequested(false, item));\n\n        this.onPaste.emit(text);\n\n        setTimeout(() => this.setInputValue(''), 0);\n    }\n}\n"]}